name: Manual APK Build (autolink packageName fix)
on:
  push:
    paths: [".github/force-run-apk"]
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: recover-my-app
          fetch-depth: 0

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Android SDK (CLI)
        shell: bash
        run: |
          set -euxo pipefail
          ANDROID_SDK_ROOT="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o clt.zip
          unzip -q clt.zip && rm clt.zip
          mv cmdline-tools latest
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-34" "build-tools;34.0.0" || true
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          {
            echo "ANDROID_HOME=$ANDROID_SDK_ROOT"
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          } >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools"     >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> "$GITHUB_PATH"

      - name: Restore keystore from secret (tolerant)
        env:
          B64: ${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 }}
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          if [ -z "${B64:-}" ]; then
            echo "No keystore secret ‚Äì skip"; exit 0; fi
          if ! printf "%s" "$B64" | base64 -d > "$HOME/release.jks" 2>/dev/null; then
            echo "Keystore secret is not valid base64 ‚Äì skipping signing"
            rm -f "$HOME/release.jks"; exit 0; fi
          if [ ! -s "$HOME/release.jks" ]; then
            echo "Decoded keystore is empty ‚Äì skipping signing"
            rm -f "$HOME/release.jks"; exit 0; fi
          install -m 600 "$HOME/release.jks" "$HOME/release.jks"
          ls -l "$HOME/release.jks" || true

      - name: Export signing env (if keystore present)
        shell: bash
        run: |
          if [ -f "$HOME/release.jks" ]; then
            {
              echo "ANDROID_SIGNING_STORE_FILE=$HOME/release.jks"
              echo "ANDROID_SIGNING_STORE_PASSWORD=${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}"
              echo "ANDROID_SIGNING_KEY_ALIAS=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}"
              echo "ANDROID_SIGNING_KEY_PASSWORD=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}"
            } >> "$GITHUB_ENV"
          else
            echo "No keystore ‚Äì building unsigned APK"
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS deps (robust) + RN Gradle Plugin Alias
        shell: bash
        env:
          NPM_CONFIG_LEGACY_PEER_DEPS: 'true'
        run: |
          set -euxo pipefail
          if [ -f yarn.lock ]; then
            corepack enable || true
            yarn --version || true
            yarn install --immutable || yarn install --frozen-lockfile || yarn install --ignore-engines
          else
            npm ci --no-audit --no-fund --legacy-peer-deps || npm install --no-audit --no-fund --legacy-peer-deps
          fi
          # Alias f√ºr √§ltere Includes:
          if [ -d node_modules/@react-native/gradle-plugin ] && [ ! -e node_modules/react-native-gradle-plugin ]; then
            (cd node_modules && ln -s "@react-native/gradle-plugin" "react-native-gradle-plugin") || cp -r node_modules/@react-native/gradle-plugin node_modules/react-native-gradle-plugin
          fi

      - name: Prepare Autolinking env
        shell: bash
        run: |
          set -euxo pipefail
          echo "NODE_BINARY=$(command -v node)" >> "$GITHUB_ENV"
          echo "REACT_NATIVE_NPM_ROOT=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"

      # üîß NEU: packageName ermitteln & autolinking.json sicher patchen
      - name: Ensure autolinking.json has project.android.packageName
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p android/build/generated/autolinking

          # 1) RN/Expo JSON best-effort erzeugen
          if npx --yes react-native --version >/dev/null 2>&1; then
            npx --yes react-native config --platform android --json > android/build/generated/autolinking/autolinking.json || true
          fi
          if [ ! -s android/build/generated/autolinking/autolinking.json ] && npx --yes expo-modules-autolinking --help >/dev/null 2>&1; then
            npx --yes expo-modules-autolinking list --platform android --json > android/build/generated/autolinking/autolinking.json || true
          fi
          [ -s android/build/generated/autolinking/autolinking.json ] || echo '{}' > android/build/generated/autolinking/autolinking.json

          # 2) packageName aus Gradle/Manifest robust extrahieren
          PKG=""
          if [ -f android/app/build.gradle ]; then
            PKG="$(sed -n 's/^[[:space:]]*applicationId[[:space:]]*["'\'']\([^"'\'' ]\+\)["'\''].*/\1/p' android/app/build.gradle | head -n1 || true)"
            [ -n "$PKG" ] || PKG="$(sed -n 's/^[[:space:]]*namespace[[:space:]]*["'\'']\([^"'\'' ]\+\)["'\''].*/\1/p' android/app/build.gradle | head -n1 || true)"
          fi
          if [ -z "$PKG" ] && [ -f android/app/build.gradle.kts ]; then
            PKG="$(sed -n 's/^[[:space:]]*namespace[[:space:]]*=\s*"\([^"]\+\)".*/\1/p' android/app/build.gradle.kts | head -n1 || true)"
            [ -n "$PKG" ] || PKG="$(sed -n 's/^[[:space:]]*applicationId[[:space:]]*=\s*"\([^"]\+\)".*/\1/p' android/app/build.gradle.kts | head -n1 || true)"
          fi
          if [ -z "$PKG" ] && [ -f android/app/src/main/AndroidManifest.xml ]; then
            PKG="$(sed -n 's/.*package="\([^"]\+\)".*/\1/p' android/app/src/main/AndroidManifest.xml | head -n1 || true)"
          fi
          if [ -z "$PKG" ] && [ -f android/AndroidManifest.xml ]; then
            PKG="$(sed -n 's/.*package="\([^"]\+\)".*/\1/p' android/AndroidManifest.xml | head -n1 || true)"
          fi
          if [ -z "$PKG" ]; then
            # Generischer Fallback (g√ºltig & stabil)
            OWNER="$(echo "${GITHUB_REPOSITORY%/*}" | tr '[:upper:]' '[:lower:]' || true)"
            NAME="$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9' || true)"
            PKG="com.${OWNER:-app}.${NAME:-app}"
            PKG="$(echo "$PKG" | sed 's/\.\././g;s/^\.*//;s/\.*$//')"
          fi
          echo "Detected packageName: $PKG"

          # 3) JSON patchen (ohne jq, via Node ‚Äì immer verf√ºgbar)
          node - <<'NODE'
          const fs = require('fs'), path = require('path');
          const p = 'android/build/generated/autolinking/autolinking.json';
          const pkg = process.env.PKG || '';
          let obj = {};
          try { obj = JSON.parse(fs.readFileSync(p,'utf8')); } catch {}
          obj.project = obj.project || {};
          obj.project.android = obj.project.android || {};
          if (!obj.project.android.sourceDir) obj.project.android.sourceDir = 'android';
          obj.project.android.packageName = pkg || obj.project.android.packageName || 'com.autogen.app';
          if (!Array.isArray(obj.dependencies)) obj.dependencies = [];
          fs.mkdirSync(path.dirname(p), { recursive: true });
          fs.writeFileSync(p, JSON.stringify(obj, null, 2));
          console.log('autolinking.json ->\n', JSON.stringify(obj, null, 2));
NODE
        env:
          PKG: ${{ steps.ensure_autolink_pkg.outputs.pkg || '' }}
        id: ensure_autolink

      - name: Detect Gradle wrapper
        id: gw
        shell: bash
        run: |
          set -euo pipefail
          f="$(git ls-files | grep -E '(^|/)gradlew$' | head -n1 || true)"
          if [ -z "${f:-}" ]; then
            echo "‚ùå No gradlew found"
            ls -la; find . -maxdepth 4 -name gradlew -type f -print || true
            exit 1
          fi
          echo "gradlew=$f" >> "$GITHUB_OUTPUT"
          echo "dir=$(dirname "$f")" >> "$GITHUB_OUTPUT"
          echo "Found gradlew at: $f"

      # (Optional) Warmup genau der betroffenen Task
      - name: Warm up :app:generateAutolinkingPackageList (best-effort)
        working-directory: ${{ steps.gw.outputs.dir }}
        shell: bash
        continue-on-error: true
        run: |
          set -euxo pipefail
          ./gradlew --console=plain --no-daemon :app:generateAutolinkingPackageList || true
          ls -la ./build/generated/autolinking || true
          ls -la ../build/generated/autolinking || true

      - name: Build (assembleRelease auto)
        working-directory: ${{ steps.gw.outputs.dir }}
        shell: bash
        run: |
          set -euo pipefail
          chmod +x ./gradlew || true
          ./gradlew --console=plain --no-daemon assembleRelease || \
          ./gradlew --console=plain --no-daemon :app:assembleRelease

      - name: Upload outputs (APKs + reports + autolinking.json)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: |
            **/build/outputs/**
            **/build/reports/**
            android/build/generated/autolinking/autolinking.json
          if-no-files-found: ignore
