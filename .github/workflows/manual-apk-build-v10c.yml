name: Manual APK Build (v10c bulletproof+logs+manifest)
on:
  push:
    paths: [".github/force-run-apk-v10c"]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Android SDK (CLI)
        run: |
          set -euxo pipefail
          ANDROID_SDK_ROOT="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o clt.zip
          unzip -q clt.zip && rm clt.zip
          mv cmdline-tools latest
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-34" "build-tools;34.0.0" || true
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools"     >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> "$GITHUB_PATH"

      - uses: actions/setup-node@v4
        if: ${{ hashFiles('**/package.json') != '' || hashFiles('**/yarn.lock') != '' }}
        with:
          node-version: '20'
          cache: 'npm'

      - name: (Optional) JS-Deps installieren
        if: ${{ hashFiles('**/package.json') != '' || hashFiles('**/yarn.lock') != '' }}
        run: |
          set -euxo pipefail
          if [ -f yarn.lock ]; then
            corepack enable || true
            yarn install --immutable || yarn install --frozen-lockfile || yarn install --ignore-engines
          else
            npm ci --no-audit --no-fund --legacy-peer-deps || npm install --no-audit --no-fund --legacy-peer-deps
          fi

      - name: Gradle Wrapper finden
        id: gw
        run: |
          set -euo pipefail
          f="$(git ls-files | grep -E '(^|/)gradlew$' | head -n1 || true)"
          if [ -z "${f:-}" ]; then echo "❌ No gradlew found"; exit 1; fi
          echo "gradlew=$f" >> "$GITHUB_OUTPUT"
          echo "dir=$(dirname "$f")" >> "$GITHUB_OUTPUT"

      - name: Release bauen (loggt & bricht nicht ab)
        working-directory: ${{ steps.gw.outputs.dir }}
        continue-on-error: true
        env:
          ROOT: ${{ github.workspace }}
        run: |
          set -euxo pipefail
          LOGROOT="$ROOT/build-logs"
          mkdir -p "$LOGROOT"
          chmod +x ./gradlew || true
          (./gradlew --console=plain --no-daemon --stacktrace --warning-mode all assembleRelease \
            || ./gradlew --console=plain --no-daemon --stacktrace --warning-mode all :app:assembleRelease \
            || true) 2>&1 | tee "$LOGROOT/gradle-build.log"
          echo "Build finished (exit tolerated). See build-logs/gradle-build.log" > "$LOGROOT/README.txt"

      - name: Artefakte einsammeln (ALWAYS)
        if: always()
        run: |
          set -euxo pipefail
          mkdir -p release-apks
          # breit suchen
          find . -type f \( -path "*/outputs/apk/release/*.apk" -o -path "*/outputs/apk/*/*.apk" \) -exec cp -n {} release-apks/ \; || true
          find . -type f \( -path "*/outputs/bundle/release/*.aab" -o -path "*/outputs/bundle/*/*.aab" \) -exec cp -n {} release-apks/ \; || true
          # feste Namen zusätzlich
          APK_ONE="$(find release-apks -maxdepth 1 -type f -name "*.apk" | head -n1 || true)"
          AAB_ONE="$(find release-apks -maxdepth 1 -type f -name "*.aab" | head -n1 || true)"
          [ -n "${APK_ONE:-}" ] && cp -n "$APK_ONE" release-apks/app-release.apk || true
          [ -n "${AAB_ONE:-}" ] && cp -n "$AAB_ONE" release-apks/app-release.aab || true
          # Manifest zur besseren Diagnose
          {
            echo "== release-apks manifest =="
            date -Iseconds
            pwd
            echo
            echo "[release-apks/ listing]"
            ls -lh release-apks || true
            echo
            echo "[first 10 discovered outputs under repo]"
            find . -maxdepth 6 -type f \( -name "*.apk" -o -name "*.aab" \) | head -n 10
          } > release-apks/_manifest.txt
          # Dummy falls leer
          if [ -z "$(ls -A release-apks)" ]; then
            echo "No APK/AAB built" > release-apks/NO_BUILD.txt
          fi
          ls -lhR release-apks || true

      - name: Upload APK/AAB (ALWAYS)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: release-apks/*
          if-no-files-found: warn

      - name: Upload Build-Logs (ALWAYS)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build-logs/*
          if-no-files-found: warn
