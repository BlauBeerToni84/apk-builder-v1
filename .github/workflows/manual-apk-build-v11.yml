name: Manual APK Build (v11 signed)
on:
  push:
    paths: [".github/force-run-apk-v11"]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Android SDK (CLI) + unify env
        run: |
          set -euxo pipefail
          ANDROID_SDK_ROOT="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o clt.zip
          unzip -q clt.zip && rm clt.zip
          mv cmdline-tools latest
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-34" "build-tools;34.0.0" || true
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          {
            echo "ANDROID_HOME=$ANDROID_SDK_ROOT"
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
            echo "ANDROID_SDK_HOME=$ANDROID_SDK_ROOT"
          } >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools"     >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> "$GITHUB_PATH"

      - uses: actions/setup-node@v4
        if: ${{ hashFiles('**/package.json') != '' || hashFiles('**/yarn.lock') != '' }}
        with:
          node-version: '20'
          cache: 'npm'

      - name: (Optional) JS-Deps installieren
        if: ${{ hashFiles('**/package.json') != '' || hashFiles('**/yarn.lock') != '' }}
        run: |
          set -euxo pipefail
          if [ -f yarn.lock ]; then
            corepack enable || true
            yarn install --immutable || yarn install --frozen-lockfile || yarn install --ignore-engines
          else
            npm ci --no-audit --no-fund --legacy-peer-deps || npm install --no-audit --no-fund --legacy-peer-deps
          fi

      - name: Gradle Wrapper finden
        id: gw
        run: |
          set -euo pipefail
          f="$(git ls-files | grep -E '(^|/)gradlew$' | head -n1 || true)"
          if [ -z "${f:-}" ]; then echo "❌ No gradlew found"; exit 1; fi
          echo "gradlew=$f" >> "$GITHUB_OUTPUT"
          echo "dir=$(dirname "$f")" >> "$GITHUB_OUTPUT"

      - name: Force local.properties (sdk.dir)
        run: |
          set -euxo pipefail
          echo "sdk.dir=${ANDROID_HOME}" > "${{ steps.gw.outputs.dir }}/local.properties"
          cat "${{ steps.gw.outputs.dir }}/local.properties"

      - name: Release bauen (skip lint gate)
        working-directory: ${{ steps.gw.outputs.dir }}
        run: |
          set -euxo pipefail
          chmod +x ./gradlew || true
          ./gradlew --console=plain --no-daemon -x lintVitalRelease assembleRelease || \
          ./gradlew --console=plain --no-daemon -x lintVitalRelease :app:assembleRelease

      - name: Artefakte einsammeln
        run: |
          set -euxo pipefail
          mkdir -p release-apks
          find . -type f \( -path "*/outputs/apk/release/*.apk" -o -path "*/outputs/apk/*/*.apk" \) -exec cp -n {} release-apks/ \; || true
          find . -type f \( -path "*/outputs/bundle/release/*.aab" -o -path "*/outputs/bundle/*/*.aab" \) -exec cp -n {} release-apks/ \; || true
          APK_ONE="$(find release-apks -maxdepth 1 -type f -name "*.apk" | head -n1 || true)"
          [ -n "${APK_ONE:-}" ] && cp -n "$APK_ONE" release-apks/app-release.apk || true
          ls -lh release-apks || true

      - name: Sign APK (debug keystore for testing)
        run: |
          set -euxo pipefail
          cd release-apks
          APK="$(ls -1 *.apk 2>/dev/null | head -n1 || true)"
          if [ -n "${APK:-}" ]; then
            ALIGNED="app-release-aligned.apk"
            SIGNED="app-release-signed.apk"
            "$ANDROID_HOME/build-tools/34.0.0/zipalign" -f 4 "$APK" "$ALIGNED" || cp "$APK" "$ALIGNED"
            keytool -genkeypair -v -storetype JKS -keystore debug.jks -storepass android -keypass android -alias androiddebugkey -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US" || true
            "$ANDROID_HOME/build-tools/34.0.0/apksigner" sign --ks debug.jks --ks-pass pass:android --key-pass pass:android --out "$SIGNED" "$ALIGNED" || true
            "$ANDROID_HOME/build-tools/34.0.0/apksigner" verify -v "$SIGNED" || true
            ls -lh
          else
            echo "No APK to sign."
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: release-apks/*
          if-no-files-found: warn
