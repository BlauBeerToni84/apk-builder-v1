name: EAS Build

on:
  workflow_dispatch:
    inputs:
      easProfile:
        description: EAS profile (e.g. production, preview)
        required: false
        default: production
        type: string
      platform:
        description: Target platform
        required: false
        default: android
        type: choice
        options: [android, ios, all]

# Verhindert Auto-Cancel durch gleichzeitige Runs
concurrency:
  group: eas-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          # kein cache, wir verlassen uns auf den Lockfile

      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Install deps (lock-aware)
        run: |
          set -e
          if [ -f package-lock.json ]; then
            echo "Found package-lock.json → npm ci"
            npm ci --no-audit --no-fund
          else
            echo "No lockfile → npm install"
            npm install --no-audit --no-fund
          fi
          npm i -g eas-cli@latest

      - name: Validate EXPO auth
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          if [ -z "${EXPO_TOKEN:-}" ]; then
            echo "EXPO_TOKEN Secret fehlt. Repo → Settings → Secrets → Actions."
            exit 1
          fi
          eas whoami

      - name: Decide platforms
        id: plan
        run: |
          PLATFORM="${{ inputs.platform }}"
          [ -z "$PLATFORM" ] && PLATFORM="android"
          if [ "$PLATFORM" = "all" ]; then
            echo "matrix=android ios" >> "$GITHUB_OUTPUT"
          else
            echo "matrix=$PLATFORM" >> "$GITHUB_OUTPUT"
          fi

      - name: Build (EAS, wait, json)
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          set -euo pipefail
          PROFILE="${{ inputs.easProfile }}"
          [ -z "${PROFILE:-}" ] && PROFILE="production"
          mkdir -p dist
          build_one () {
            local PLATFORM="$1"
            echo "::group::EAS build ($PLATFORM)"
            npx eas build -p "$PLATFORM" --profile "$PROFILE" --non-interactive --wait --json > "build-$PLATFORM.json"
            cat "build-$PLATFORM.json"
            URL="$(jq -r '..|.buildUrl? // empty' "build-$PLATFORM.json" | head -n1)"
            if [ -z "$URL" ] || [ "$URL" = "null" ]; then
              echo "Keine buildUrl für $PLATFORM gefunden"; exit 1
            fi
            FINAL_URL="$(curl -sIL "$URL" | awk '/^location:/I {print $2}' | tail -n1 | tr -d "\r")"
            [ -z "$FINAL_URL" ] && FINAL_URL="$URL"
            # -J respektiert Content-Disposition (liefert .apk/.aab/.ipa Dateinamen)
            curl -fL -J "$FINAL_URL" -o "dist/app-$PLATFORM.bin"
            file "dist/app-$PLATFORM.bin" || true
            ls -lah dist
            echo "::endgroup::"
          }
          for p in ${{ steps.plan.outputs.matrix }}; do build_one "$p"; done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ inputs.platform || 'android' }}
          path: |
            dist/**
            build-*.json
          if-no-files-found: error
