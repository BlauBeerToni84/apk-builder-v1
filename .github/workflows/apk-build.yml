name: apk-build

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: "Release erstellen und APK anhängen?"
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - uses: gradle/actions/setup-gradle@v3

      - uses: android-actions/setup-android@v3

      - name: Prepare log dir
        run: mkdir -p build-logs

      # Node + JS-Deps (für RN/Expo)
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install JS dependencies (auto-detect)
        shell: bash
        env:
          CI: "true"
        run: |
          set -e
          echo "== node/npm versions ==" | tee -a build-logs/js-deps.log
          node -v | tee -a build-logs/js-deps.log
          npm -v  | tee -a build-logs/js-deps.log
          echo "== workspace snapshot ==" | tee -a build-logs/js-deps.log
          (ls -la; echo; ls -la android 2>/dev/null || true) | tee -a build-logs/js-deps.log

          if [ -f package.json ]; then
            corepack enable || true
            if [ -f yarn.lock ]; then
              corepack prepare yarn@stable --activate || true
              ( set -x; yarn install --frozen-lockfile ) 2>&1 | tee -a build-logs/js-deps.log
            elif [ -f pnpm-lock.yaml ]; then
              corepack prepare pnpm@latest --activate || true
              ( set -x; pnpm install --frozen-lockfile ) 2>&1 | tee -a build-logs/js-deps.log
            elif [ -f package-lock.json ]; then
              ( set -x; npm ci --legacy-peer-deps --no-audit --no-fund ) 2>&1 | tee -a build-logs/js-deps.log
            else
              ( set -x; npm i --legacy-peer-deps --no-audit --no-fund ) 2>&1 | tee -a build-logs/js-deps.log
            fi
          else
            echo "Keine package.json – überspringe JS-Deps." | tee -a build-logs/js-deps.log
          fi

      - name: Expo prebuild (nur falls android/ fehlt)
        shell: bash
        run: |
          if [ ! -d android ] && [ -f package.json ]; then
            npx --yes expo prebuild -p android --non-interactive || \
            npx --yes expo prebuild -p android --non-interactive --no-install
          else
            echo "android/ vorhanden – überspringe Expo prebuild."
          fi

      - name: Restore keystore from secret
        shell: bash
        env:
          ANDROID_SIGNING_KEYSTORE_BASE64: ${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 }}
        run: |
          if [ -n "${ANDROID_SIGNING_KEYSTORE_BASE64:-}" ]; then
            echo "$ANDROID_SIGNING_KEYSTORE_BASE64" | base64 -d > "$HOME/release.jks"
            ls -l "$HOME/release.jks" || true
          else
            echo "Kein Keystore-Secret gesetzt – baue unsigned."
          fi

      - name: Configure Gradle signing (if keystore present)
        shell: bash
        run: |
          if [ -f "$HOME/release.jks" ]; then
            mkdir -p ~/.gradle
            cat > ~/.gradle/gradle.properties <<EOF
            MY_SIGNING_STORE_FILE=${HOME}/release.jks
            MY_SIGNING_STORE_PASSWORD=${{ secrets.ANDROID_SIGNING_KEYSTORE_PASSWORD }}
            MY_SIGNING_KEY_ALIAS=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
            MY_SIGNING_KEY_PASSWORD=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
            EOF
          else
            echo "Keystore nicht vorhanden – überspringe Signier-Konfig."
          fi

      - name: Build (assembleRelease)
        shell: bash
        run: |
          set -e
          LOGDIR="$PWD/build-logs"
          if [ -x ./gradlew ]; then
            chmod +x ./gradlew
            ./gradlew --no-daemon assembleRelease --stacktrace --console=plain 2>&1 | tee "$LOGDIR/gradle-build.log"
          elif [ -x ./android/gradlew ]; then
            chmod +x ./android/gradlew
            (cd android && ./gradlew --no-daemon assembleRelease --stacktrace --console=plain) 2>&1 | tee "$LOGDIR/gradle-build.log"
          else
            echo "Gradle wrapper nicht gefunden" | tee -a "$LOGDIR/gradle-build.log"
            exit 1
          fi

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: build-logs/*.log
          if-no-files-found: warn
          retention-days: 7

      - name: Upload artifact (android-apk)
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            **/build/outputs/apk/release/*.apk
          if-no-files-found: error
          retention-days: 7

      - name: Create GitHub Release and upload APK(s)
        if: ${{ github.event.inputs.create_release == true }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Build ${{ github.run_number }}"
          draft: false
          prerelease: false
          files: |
            **/build/outputs/apk/release/*.apk
