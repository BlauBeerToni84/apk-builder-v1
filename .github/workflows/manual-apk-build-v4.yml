name: Manual APK Build (v4 manifest+namespace hard-fix)
on:
  push:
    paths: [".github/force-run-apk"]
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: recover-my-app
          fetch-depth: 0

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Android SDK (CLI)
        shell: bash
        run: |
          set -euxo pipefail
          ANDROID_SDK_ROOT="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o clt.zip
          unzip -q clt.zip && rm clt.zip
          mv cmdline-tools latest
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-34" "build-tools;34.0.0" || true
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          {
            echo "ANDROID_HOME=$ANDROID_SDK_ROOT"
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          } >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools"     >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> "$GITHUB_PATH"

      - name: Restore keystore from secret (tolerant)
        env:
          B64: ${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 }}
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          if [ -z "${B64:-}" ]; then
            echo "No keystore secret – skip"; exit 0; fi
          if ! printf "%s" "$B64" | base64 -d > "$HOME/release.jks" 2>/dev/null; then
            echo "Keystore secret is not valid base64 – skipping signing"
            rm -f "$HOME/release.jks"; exit 0; fi
          if [ ! -s "$HOME/release.jks" ]; then
            echo "Decoded keystore is empty – skipping signing"
            rm -f "$HOME/release.jks"; exit 0; fi
          install -m 600 "$HOME/release.jks" "$HOME/release.jks"
          ls -l "$HOME/release.jks" || true

      - name: Export signing env (if keystore present)
        shell: bash
        run: |
          if [ -f "$HOME/release.jks" ]; then
            {
              echo "ANDROID_SIGNING_STORE_FILE=$HOME/release.jks"
              echo "ANDROID_SIGNING_STORE_PASSWORD=${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}"
              echo "ANDROID_SIGNING_KEY_ALIAS=${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}"
              echo "ANDROID_SIGNING_KEY_PASSWORD=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}"
            } >> "$GITHUB_ENV"
          else
            echo "No keystore – building unsigned APK"
          fi

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install JS deps (robust) + RN Gradle Plugin Alias
        shell: bash
        env:
          NPM_CONFIG_LEGACY_PEER_DEPS: 'true'
        run: |
          set -euxo pipefail
          if [ -f yarn.lock ]; then
            corepack enable || true
            yarn --version || true
            yarn install --immutable || yarn install --frozen-lockfile || yarn install --ignore-engines
          else
            npm ci --no-audit --no-fund --legacy-peer-deps || npm install --no-audit --no-fund --legacy-peer-deps
          fi
          if [ -d node_modules/@react-native/gradle-plugin ] && [ ! -e node_modules/react-native-gradle-plugin ]; then
            (cd node_modules && ln -s "@react-native/gradle-plugin" "react-native-gradle-plugin") || cp -r node_modules/@react-native/gradle-plugin node_modules/react-native-gradle-plugin
          fi

      # 1) Paketnamen bestimmen
      - name: Detect Android packageName
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          PKG=""
          if [ -f android/app/build.gradle ]; then
            PKG="$(sed -n 's/^[[:space:]]*applicationId[[:space:]]*["'\'']\([^"'\''[:space:]]\+\)["'\''].*/\1/p' android/app/build.gradle | head -n1 || true)"
            [ -n "$PKG" ] || PKG="$(sed -n 's/^[[:space:]]*namespace[[:space:]]*["'\'']\([^"'\''[:space:]]\+\)["'\''].*/\1/p' android/app/build.gradle | head -n1 || true)"
          fi
          if [ -z "$PKG" ] && [ -f android/app/build.gradle.kts ]; then
            PKG="$(sed -n 's/^[[:space:]]*applicationId[[:space:]]*=\s*"\([^"]\+\)".*/\1/p' android/app/build.gradle.kts | head -n1 || true)"
            [ -n "$PKG" ] || PKG="$(sed -n 's/^[[:space:]]*namespace[[:space:]]*=\s*"\([^"]\+\)".*/\1/p' android/app/build.gradle.kts | head -n1 || true)"
          fi
          if [ -z "$PKG" ] && [ -f android/app/src/main/AndroidManifest.xml ]; then
            PKG="$(sed -n 's/.*package="\([^"]\+\)".*/\1/p' android/app/src/main/AndroidManifest.xml | head -n1 || true)"
          fi
          if [ -z "$PKG" ]; then
            OWNER="$(echo "${GITHUB_REPOSITORY%/*}" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9' || true)"
            NAME="$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9' || true)"
            PKG="com.${OWNER:-app}.${NAME:-app}"
          fi
          PKG="$(echo "$PKG" | sed 's/\.\././g;s/^\.*//;s/\.*$//')"
          echo "packageName=$PKG" | tee -a "$GITHUB_OUTPUT"

      # 2) build.gradle/build.gradle.kts patchen: applicationId + namespace (AGP8)
      - name: Patch Gradle files (applicationId + namespace)
        shell: bash
        env:
          PKG: ${{ steps.pkg.outputs.packageName }}
        run: |
          set -euxo pipefail
          if [ -f android/app/build.gradle ]; then
            # applicationId einfügen, falls fehlt
            if ! grep -qE '^[[:space:]]*applicationId[[:space:]]*["'\'']' android/app/build.gradle; then
              awk '1; /defaultConfig[[:space:]]*\{/ && !x{print "        applicationId \""ENVIRON["PKG"]"\""; x=1}' android/app/build.gradle > android/app/build.gradle.ci
              mv android/app/build.gradle.ci android/app/build.gradle
            fi
            # namespace einfügen, falls fehlt
            if ! grep -qE '^[[:space:]]*namespace[[:space:]]*"' android/app/build.gradle; then
              awk '/^[[:space:]]*android[[:space:]]*\{/ && !x{print; print "    namespace \""ENVIRON["PKG"]"\""; x=1; next}1' android/app/build.gradle > android/app/build.gradle.ci
              mv android/app/build.gradle.ci android/app/build.gradle
            fi
          fi
          if [ -f android/app/build.gradle.kts ]; then
            # applicationId in KTS
            if ! grep -qE 'applicationId\s*=' android/app/build.gradle.kts; then
              awk '1; /defaultConfig[[:space:]]*\{/ && !x{print "        applicationId = \""ENVIRON["PKG"]"\""; x=1}' android/app/build.gradle.kts > android/app/build.gradle.kts.ci
              mv android/app/build.gradle.kts.ci android/app/build.gradle.kts
            fi
            # namespace in KTS
            if ! grep -qE 'namespace\s*=' android/app/build.gradle.kts; then
              awk '/^[[:space:]]*android[[:space:]]*\{/ && !x{print; print "    namespace = \""ENVIRON["PKG"]"\""; x=1; next}1' android/app/build.gradle.kts > android/app/build.gradle.kts.ci
              mv android/app/build.gradle.kts.ci android/app/build.gradle.kts
            fi
          fi

      # 3) RN Config schreiben (sichert Autolink)
      - name: Ensure react-native.config.js (packageName)
        shell: bash
        env:
          PKG: ${{ steps.pkg.outputs.packageName }}
        run: |
          set -euxo pipefail
          if [ ! -f react-native.config.js ]; then
            cat > react-native.config.js <<EOF
// autogenerated by CI
module.exports = { project: { android: { sourceDir: "android", packageName: "${PKG}" } } };
EOF
          fi
          node -e "console.log(require('./react-native.config.js'))" || true

      # 4) Manifest **immer** sauber überschreiben + strings.xml sichern
      - name: Overwrite AndroidManifest.xml + ensure strings.xml
        shell: bash
        env:
          PKG: ${{ steps.pkg.outputs.packageName }}
        run: |
          set -euxo pipefail
          MF="android/app/src/main/AndroidManifest.xml"
          mkdir -p "$(dirname "$MF")"
          cp -f "$MF" "$MF.bak" 2>/dev/null || true
          cat > "$MF" <<EOF
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="${PKG}">
  <uses-permission android:name="android.permission.INTERNET"/>
  <application
    android:label="@string/app_name"
    android:allowBackup="false"
    android:supportsRtl="true">
    <activity
      android:name=".MainActivity"
      android:exported="true"
      android:label="@string/app_name"
      android:configChanges="keyboard|keyboardHidden|orientation|screenSize|uiMode"
      android:windowSoftInputMode="adjustResize">
      <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
      </intent-filter>
    </activity>
  </application>
</manifest>
EOF
          SV="android/app/src/main/res/values/strings.xml"
          mkdir -p "$(dirname "$SV")"
          if [ ! -s "$SV" ] || ! grep -q '<string name="app_name">' "$SV"; then
            APPNAME="$(basename "${GITHUB_REPOSITORY#*/}")"
            cat > "$SV" <<EOF
<resources>
  <string name="app_name">${APPNAME}</string>
</resources>
EOF
          fi
          sed -n '1,120p' "$MF" || true
          echo "== strings.xml ==" && cat "$SV" || true

      # 5) autolinking.json forcieren
      - name: Write autolinking.json (force)
        shell: bash
        env:
          PKG: ${{ steps.pkg.outputs.packageName }}
        run: |
          set -euo pipefail
          mkdir -p android/build/generated/autolinking
          cat > android/build/generated/autolinking/autolinking.json <<EOF
          {
            "project": { "android": { "sourceDir": "android", "packageName": "${PKG}" } },
            "dependencies": []
          }
          EOF
          cat android/build/generated/autolinking/autolinking.json

      - name: Detect Gradle wrapper
        id: gw
        shell: bash
        run: |
          set -euo pipefail
          f="$(git ls-files | grep -E '(^|/)gradlew$' | head -n1 || true)"
          if [ -z "${f:-}" ]; then
            echo "❌ No gradlew found"
            ls -la; find . -maxdepth 4 -name gradlew -type f -print || true
            exit 1
          fi
          echo "gradlew=$f" >> "$GITHUB_OUTPUT"
          echo "dir=$(dirname "$f")" >> "$GITHUB_OUTPUT"
          echo "Found gradlew at: $f"

      # Optional: zeige Merge-Fehler detailliert
      - name: Warm up manifest merge (logs)
        working-directory: ${{ steps.gw.outputs.dir }}
        shell: bash
        continue-on-error: true
        run: |
          set -euxo pipefail
          ./gradlew --console=plain --no-daemon :app:processReleaseMainManifest --stacktrace || true
          find app/build -path "*/merged_manifests/*/AndroidManifest.xml" -maxdepth 1 -type f -print -exec head -n 40 {} \; || true

      - name: Build (assembleRelease auto)
        working-directory: ${{ steps.gw.outputs.dir }}
        shell: bash
        run: |
          set -euo pipefail
          chmod +x ./gradlew || true
          ./gradlew --console=plain --no-daemon assembleRelease || \
          ./gradlew --console=plain --no-daemon :app:assembleRelease

      - name: Upload outputs (APKs + manifests + reports)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: |
            **/build/outputs/**
            **/build/reports/**
            android/build/reports/problems/problems-report.html
            android/app/src/main/AndroidManifest.xml
            android/app/src/main/AndroidManifest.xml.bak
            **/merged_manifests/**/AndroidManifest.xml
          if-no-files-found: ignore
