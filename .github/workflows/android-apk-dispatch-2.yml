name: Android APK (dispatch v2)
on:
  workflow_dispatch:
    inputs:
      src_mode:
        description: 'repo | zip'
        required: true
        default: 'repo'
      zip_url:
        description: 'ZIP Quelle (wenn src_mode=zip)'
        required: false
      subdir:
        description: 'Unterordner'
        required: false
        default: ''
      gradle_task:
        description: 'Gradle Task'
        required: true
        default: 'assembleRelease'
      node_version:
        description: 'Node'
        required: true
        default: '20'
      java_version:
        description: 'Java'
        required: true
        default: '17'
      create_release:
        description: 'Release?'
        required: true
        default: 'false'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { java-version: ${{ inputs.java_version }}, distribution: temurin, cache: gradle }
      - uses: android-actions/setup-android@v3
      - name: Projektpfad bestimmen
        run: |
          set -eux
          SRC="$GITHUB_WORKSPACE"
          if [ "${{ inputs.src_mode }}" = "zip" ] && [ -n "${{ inputs.zip_url }}" ]; then
            mkdir -p workspace && cd workspace
            curl -L "${{ inputs.zip_url }}" -o src.zip
            unzip -q src.zip
            ROOT_DIR="$(ls -1 | head -n1)"
            SRC="$GITHUB_WORKSPACE/workspace/$ROOT_DIR"
          fi
          if [ -n "${{ inputs.subdir }}" ]; then SRC="$SRC/${{ inputs.subdir }}"; fi
          echo "SRC=$SRC" >> $GITHUB_ENV
          test -d "$SRC"
      - name: Build-Typ erkennen
        run: |
          set -eux; cd "$SRC"
          if [ -f "android/gradlew" ]; then
            echo "GRADLEW=$SRC/android/gradlew" >> $GITHUB_ENV
            echo "PROJECT_DIR=$SRC/android" >> $GITHUB_ENV
            echo "JS_PROJECT=0" >> $GITHUB_ENV
          elif [ -f "gradlew" ]; then
            echo "GRADLEW=$SRC/gradlew" >> $GITHUB_ENV
            echo "PROJECT_DIR=$SRC" >> $GITHUB_ENV
            echo "JS_PROJECT=0" >> $GITHUB_ENV
          elif [ -f "package.json" ]; then
            echo "JS_PROJECT=1" >> $GITHUB_ENV
            echo "PROJECT_DIR=$SRC" >> $GITHUB_ENV
          else
            echo "Kein unterstützter Projekttyp." >&2; exit 1
          fi
      - name: JS prebuild
        if: env.JS_PROJECT == '1'
        run: |
          set -eux; cd "$PROJECT_DIR"
          corepack enable
          echo "Node wird über setup-node installiert"
      - uses: actions/setup-node@v4
        if: env.JS_PROJECT == '1'
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm
          cache-dependency-path: |
            ${{ env.PROJECT_DIR }}/package-lock.json
            ${{ env.PROJECT_DIR }}/pnpm-lock.yaml
            ${{ env.PROJECT_DIR }}/yarn.lock
      - name: Expo prebuild
        if: env.JS_PROJECT == '1'
        run: |
          set -eux; cd "$PROJECT_DIR"
          npm ci || npm i
          npx expo prebuild -p android --no-install
          echo "GRADLEW=$PROJECT_DIR/android/gradlew" >> $GITHUB_ENV
          echo "PROJECT_DIR=$PROJECT_DIR/android" >> $GITHUB_ENV
      - name: Gradle ausführbar
        run: chmod +x "${{ env.GRADLEW }}"
      - name: Build
        run: |
          set -eux; cd "${{ env.PROJECT_DIR }}"
          "${{ env.GRADLEW }}" ${{ inputs.gradle_task }} --no-daemon --stacktrace
      - uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: ${{ env.PROJECT_DIR }}/**/*.apk
