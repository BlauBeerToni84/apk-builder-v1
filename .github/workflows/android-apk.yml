name: Android APK

on:
  workflow_dispatch:
    inputs:
      src_mode:
        description: 'repo | zip'
        required: true
        default: 'repo'
      zip_url:
        description: 'ZIP Quelle (wenn src_mode=zip)'
        required: false
      subdir:
        description: 'Unterordner im Projekt (optional)'
        required: false
        default: ''
      gradle_task:
        description: 'Gradle Task'
        required: true
        default: 'assembleRelease'
      node_version:
        description: 'Node.js f端r Expo/React Native'
        required: true
        default: '20'
      java_version:
        description: 'Java Version'
        required: true
        default: '17'
      create_release:
        description: 'GitHub Release erstellen'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (Repo)
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: temurin
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Optional: ZIP downloaden & entpacken
        if: ${{ inputs.src_mode == 'zip' && inputs.zip_url != '' }}
        run: |
          set -eux
          mkdir -p workspace
          cd workspace
          curl -L "${{ inputs.zip_url }}" -o src.zip
          unzip -q src.zip
          ROOT_DIR="$(ls -1 | head -n1)"
          echo "ROOT_DIR=$ROOT_DIR" >> $GITHUB_ENV

      - name: Projektpfad bestimmen
        run: |
          set -eux
          SRC="$GITHUB_WORKSPACE"
          if [ "${{ inputs.src_mode }}" = "zip" ] && [ -n "${ROOT_DIR:-}" ]; then
            SRC="$GITHUB_WORKSPACE/workspace/$ROOT_DIR"
          fi
          if [ -n "${{ inputs.subdir }}" ]; then
            SRC="$SRC/${{ inputs.subdir }}"
          fi
          echo "SRC=$SRC" >> $GITHUB_ENV
          test -d "$SRC"

      - name: Build-Typ erkennen (Gradle / RN / Expo)
        run: |
          set -eux
          cd "$SRC"
          if [ -f "android/gradlew" ]; then
            echo "GRADLEW=$SRC/android/gradlew" >> $GITHUB_ENV
            echo "PROJECT_DIR=$SRC/android" >> $GITHUB_ENV
            echo "JS_PROJECT=0" >> $GITHUB_ENV
          elif [ -f "gradlew" ]; then
            echo "GRADLEW=$SRC/gradlew" >> $GITHUB_ENV
            echo "PROJECT_DIR=$SRC" >> $GITHUB_ENV
            echo "JS_PROJECT=0" >> $GITHUB_ENV
          elif [ -f "package.json" ]; then
            echo "JS_PROJECT=1" >> $GITHUB_ENV
            echo "PROJECT_DIR=$SRC" >> $GITHUB_ENV
          else
            echo "Kein unterst端tzter Projekttyp gefunden." >&2
            exit 1
          fi

      - name: Node/Expo vorbereiten & prebuild (nur JS-Projekte)
        if: env.JS_PROJECT == '1'
        run: |
          set -eux
          cd "$PROJECT_DIR"
          corepack enable
          echo "Node wird 端ber actions/setup-node installiert"

      - name: Setup Node (nur JS-Projekte)
        if: env.JS_PROJECT == '1'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: 'npm'
          cache-dependency-path: |
            ${{ env.PROJECT_DIR }}/package-lock.json
            ${{ env.PROJECT_DIR }}/pnpm-lock.yaml
            ${{ env.PROJECT_DIR }}/yarn.lock

      - name: Expo prebuild -> Gradle (nur JS-Projekte)
        if: env.JS_PROJECT == '1'
        run: |
          set -eux
          cd "$PROJECT_DIR"
          npm ci || npm i
          npx expo prebuild -p android --no-install
          echo "GRADLEW=$PROJECT_DIR/android/gradlew" >> $GITHUB_ENV
          echo "PROJECT_DIR=$PROJECT_DIR/android" >> $GITHUB_ENV

      - name: Gradle Wrapper ausf端hrbar machen
        run: chmod +x "${{ env.GRADLEW }}"

      - name: Build
        run: |
          set -eux
          cd "${{ env.PROJECT_DIR }}"
          "${{ env.GRADLEW }}" ${{ inputs.gradle_task }} --no-daemon --stacktrace

      - name: APK(s) finden
        id: apks
        run: |
          set -eux
          cd "${{ env.PROJECT_DIR }}"
          FOUND="$(find "$PWD" -type f -name "*.apk" | tr '\n' ' ')"
          echo "apk_list=$FOUND" >> $GITHUB_OUTPUT

      - name: APK signieren (falls Secrets vorhanden)
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' && secrets.KEYSTORE_PASSWORD != '' && secrets.KEY_ALIAS != '' && secrets.KEY_PASSWORD != '' }}
        run: |
          set -eux
          mkdir -p $HOME/keystore
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > $HOME/keystore/release.keystore
          APK="$(printf "%s" "${{ steps.apks.outputs.apk_list }}" | awk '{print $1}')"
          [ -n "$APK" ]
          BUILD_TOOLS="$ANDROID_HOME/build-tools/$(ls "$ANDROID_HOME/build-tools" | sort -V | tail -n1)"
          "$BUILD_TOOLS/apksigner" sign \
            --ks $HOME/keystore/release.keystore \
            --ks-pass pass:"${{ secrets.KEYSTORE_PASSWORD }}" \
            --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
            --key-pass pass:"${{ secrets.KEY_PASSWORD }}" \
            "$APK"
          echo "SIGNED_APK=$APK" >> $GITHUB_ENV

      - name: Artefakte hochladen
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            ${{ env.PROJECT_DIR }}/**/*.apk

      - name: Release erzeugen (optional)
        if: ${{ inputs.create_release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Android Build v${{ github.run_number }}
          files: |
            ${{ env.PROJECT_DIR }}/**/*.apk
